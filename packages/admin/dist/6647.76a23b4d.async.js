(self.webpackChunk_vanblog_admin=self.webpackChunk_vanblog_admin||[]).push([[6647],{91089:function(F,P,x){"use strict";x.d(P,{c:function(){return d}});var T=x(71392),N=4;function g(u){return(0,T.Z)(u,N)}var i=g,O=x(99250),S=x(30014),L=x(82074);function d(u){var w={options:{directed:u.isDirected(),multigraph:u.isMultigraph(),compound:u.isCompound()},nodes:b(u),edges:X(u)};return O.Z(u.graph())||(w.value=i(u.graph())),w}function b(u){return S.Z(u.nodes(),function(w){var v=u.node(w),D=u.parent(w),C={v:w};return O.Z(v)||(C.value=v),O.Z(D)||(C.parent=D),C})}function X(u){return S.Z(u.edges(),function(w){var v=u.edge(w),D={v:w.v,w:w.w};return O.Z(w.name)||(D.name=w.name),O.Z(v)||(D.value=v),D})}function M(u){var w=new Graph(u.options).setGraph(u.value);return _.each(u.nodes,function(v){w.setNode(v.v,v.value),v.parent&&w.setParent(v.v,v.parent)}),_.each(u.edges,function(v){w.setEdge({v:v.v,w:v.w,name:v.name},v.value)}),w}},56647:function(F,P,x){"use strict";x.d(P,{r:function(){return G}});var T=x(67925),N=x(91089),g=x(15031),i=x(92561),O=x(67058),S=x(11456),L=x(82106);let d={},b={},X={};const M=()=>{b={},X={},d={}},u=(n,t)=>(i.l.trace("In isDecendant",t," ",n," = ",b[t].includes(n)),!!b[t].includes(n)),w=(n,t)=>(i.l.info("Decendants of ",t," is ",b[t]),i.l.info("Edge is ",n),n.v===t||n.w===t?!1:b[t]?b[t].includes(n.v)||u(n.v,t)||u(n.w,t)||b[t].includes(n.w):(i.l.debug("Tilt, ",t,",not in decendants"),!1)),v=(n,t,e,r)=>{i.l.warn("Copying children of ",n,"root",r,"data",t.node(n),r);const s=t.children(n)||[];n!==r&&s.push(n),i.l.warn("Copying (nodes) clusterId",n,"nodes",s),s.forEach(l=>{if(t.children(l).length>0)v(l,t,e,r);else{const h=t.node(l);i.l.info("cp ",l," to ",r," with parent ",n),e.setNode(l,h),r!==t.parent(l)&&(i.l.warn("Setting parent",l,t.parent(l)),e.setParent(l,t.parent(l))),n!==r&&l!==n?(i.l.debug("Setting parent",l,n),e.setParent(l,n)):(i.l.info("In copy ",n,"root",r,"data",t.node(n),r),i.l.debug("Not Setting parent for node=",l,"cluster!==rootId",n!==r,"node!==clusterId",l!==n));const o=t.edges(l);i.l.debug("Copying Edges",o),o.forEach(f=>{i.l.info("Edge",f);const m=t.edge(f.v,f.w,f.name);i.l.info("Edge data",m,r);try{w(f,r)?(i.l.info("Copying as ",f.v,f.w,m,f.name),e.setEdge(f.v,f.w,m,f.name),i.l.info("newGraph edges ",e.edges(),e.edge(e.edges()[0]))):i.l.info("Skipping copy of edge ",f.v,"-->",f.w," rootId: ",r," clusterId:",n)}catch(y){i.l.error(y)}})}i.l.debug("Removing node",l),t.removeNode(l)})},D=(n,t)=>{const e=t.children(n);let r=[...e];for(const s of e)X[s]=n,r=[...r,...D(s,t)];return r},C=(n,t)=>{i.l.trace("Searching",n);const e=t.children(n);if(i.l.trace("Searching children of id ",n,e),e.length<1)return i.l.trace("This is a valid node",n),n;for(const r of e){const s=C(r,t);if(s)return i.l.trace("Found replacement for",n," => ",s),s}},B=n=>!d[n]||!d[n].externalConnections?n:d[n]?d[n].id:n,W=(n,t)=>{if(!n||t>10){i.l.debug("Opting out, no graph ");return}else i.l.debug("Opting in, graph ");n.nodes().forEach(function(e){n.children(e).length>0&&(i.l.warn("Cluster identified",e," Replacement id in edges: ",C(e,n)),b[e]=D(e,n),d[e]={id:C(e,n),clusterData:n.node(e)})}),n.nodes().forEach(function(e){const r=n.children(e),s=n.edges();r.length>0?(i.l.debug("Cluster identified",e,b),s.forEach(l=>{if(l.v!==e&&l.w!==e){const h=u(l.v,e),o=u(l.w,e);h^o&&(i.l.warn("Edge: ",l," leaves cluster ",e),i.l.warn("Decendants of XXX ",e,": ",b[e]),d[e].externalConnections=!0)}})):i.l.debug("Not a cluster ",e,b)}),n.edges().forEach(function(e){const r=n.edge(e);i.l.warn("Edge "+e.v+" -> "+e.w+": "+JSON.stringify(e)),i.l.warn("Edge "+e.v+" -> "+e.w+": "+JSON.stringify(n.edge(e)));let s=e.v,l=e.w;if(i.l.warn("Fix XXX",d,"ids:",e.v,e.w,"Translating: ",d[e.v]," --- ",d[e.w]),d[e.v]&&d[e.w]&&d[e.v]===d[e.w]){i.l.warn("Fixing and trixing link to self - removing XXX",e.v,e.w,e.name),i.l.warn("Fixing and trixing - removing XXX",e.v,e.w,e.name),s=B(e.v),l=B(e.w),n.removeEdge(e.v,e.w,e.name);const h=e.w+"---"+e.v;n.setNode(h,{domId:h,id:h,labelStyle:"",labelText:r.label,padding:0,shape:"labelRect",style:""});const o=JSON.parse(JSON.stringify(r)),f=JSON.parse(JSON.stringify(r));o.label="",o.arrowTypeEnd="none",f.label="",o.fromCluster=e.v,f.toCluster=e.v,n.setEdge(s,h,o,e.name+"-cyclic-special"),n.setEdge(h,l,f,e.name+"-cyclic-special")}else(d[e.v]||d[e.w])&&(i.l.warn("Fixing and trixing - removing XXX",e.v,e.w,e.name),s=B(e.v),l=B(e.w),n.removeEdge(e.v,e.w,e.name),s!==e.v&&(r.fromCluster=e.v),l!==e.w&&(r.toCluster=e.w),i.l.warn("Fix Replacing with XXX",s,l,e.name),n.setEdge(s,l,r,e.name))}),i.l.warn("Adjusted Graph",N.c(n)),J(n,0),i.l.trace(d)},J=(n,t)=>{if(i.l.warn("extractor - ",t,N.c(n),n.children("D")),t>10){i.l.error("Bailing out");return}let e=n.nodes(),r=!1;for(const s of e){const l=n.children(s);r=r||l.length>0}if(!r){i.l.debug("Done, no node has children",n.nodes());return}i.l.debug("Nodes = ",e,t);for(const s of e)if(i.l.debug("Extracting node",s,d,d[s]&&!d[s].externalConnections,!n.parent(s),n.node(s),n.children("D")," Depth ",t),!d[s])i.l.debug("Not a cluster",s,t);else if(!d[s].externalConnections&&n.children(s)&&n.children(s).length>0){i.l.warn("Cluster without external connections, without a parent and with children",s,t);let h=n.graph().rankdir==="TB"?"LR":"TB";d[s]&&d[s].clusterData&&d[s].clusterData.dir&&(h=d[s].clusterData.dir,i.l.warn("Fixing dir",d[s].clusterData.dir,h));const o=new O.k({multigraph:!0,compound:!0}).setGraph({rankdir:h,nodesep:50,ranksep:50,marginx:8,marginy:8}).setDefaultEdgeLabel(function(){return{}});i.l.warn("Old graph before copy",N.c(n)),v(s,n,o,s),n.setNode(s,{clusterNode:!0,id:s,clusterData:d[s].clusterData,labelText:d[s].labelText,graph:o}),i.l.warn("New graph after copy node: (",s,")",N.c(o)),i.l.debug("Old graph after copy",N.c(n))}else i.l.warn("Cluster ** ",s," **not meeting the criteria !externalConnections:",!d[s].externalConnections," no parent: ",!n.parent(s)," children ",n.children(s)&&n.children(s).length>0,n.children("D"),t),i.l.debug(d);e=n.nodes(),i.l.warn("New list of nodes",e);for(const s of e){const l=n.node(s);i.l.warn(" Now next level",s,l),l.clusterNode&&J(l.graph,t+1)}},A=(n,t)=>{if(t.length===0)return[];let e=Object.assign(t);return t.forEach(r=>{const s=n.children(r),l=A(n,s);e=[...e,...l]}),e},j=n=>A(n,n.children()),K={rect:(n,t)=>{i.l.info("Creating subgraph rect for ",t.id,t);const e=n.insert("g").attr("class","cluster"+(t.class?" "+t.class:"")).attr("id",t.id),r=e.insert("rect",":first-child"),s=(0,i.k)((0,i.g)().flowchart.htmlLabels),l=e.insert("g").attr("class","cluster-label"),h=t.labelType==="markdown"?(0,S.c)(l,t.labelText,{style:t.labelStyle,useHtmlLabels:s}):l.node().appendChild((0,g.c)(t.labelText,t.labelStyle,void 0,!0));let o=h.getBBox();if((0,i.k)((0,i.g)().flowchart.htmlLabels)){const a=h.children[0],E=(0,L.Ys)(h);o=a.getBoundingClientRect(),E.attr("width",o.width),E.attr("height",o.height)}const f=0*t.padding,m=f/2,y=t.width<=o.width+f?o.width+f:t.width;t.width<=o.width+f?t.diff=(o.width-t.width)/2-t.padding/2:t.diff=-t.padding/2,i.l.trace("Data ",t,JSON.stringify(t)),r.attr("style",t.style).attr("rx",t.rx).attr("ry",t.ry).attr("x",t.x-y/2).attr("y",t.y-t.height/2-m).attr("width",y).attr("height",t.height+f),s?l.attr("transform","translate("+(t.x-o.width/2)+", "+(t.y-t.height/2)+")"):l.attr("transform","translate("+t.x+", "+(t.y-t.height/2)+")");const c=r.node().getBBox();return t.width=c.width,t.height=c.height,t.intersect=function(a){return(0,g.i)(t,a)},e},roundedWithTitle:(n,t)=>{const e=n.insert("g").attr("class",t.classes).attr("id",t.id),r=e.insert("rect",":first-child"),s=e.insert("g").attr("class","cluster-label"),l=e.append("rect"),h=s.node().appendChild((0,g.c)(t.labelText,t.labelStyle,void 0,!0));let o=h.getBBox();if((0,i.k)((0,i.g)().flowchart.htmlLabels)){const a=h.children[0],E=(0,L.Ys)(h);o=a.getBoundingClientRect(),E.attr("width",o.width),E.attr("height",o.height)}o=h.getBBox();const f=0*t.padding,m=f/2,y=t.width<=o.width+t.padding?o.width+t.padding:t.width;t.width<=o.width+t.padding?t.diff=(o.width+t.padding*0-t.width)/2:t.diff=-t.padding/2,r.attr("class","outer").attr("x",t.x-y/2-m).attr("y",t.y-t.height/2-m).attr("width",y+f).attr("height",t.height+f),l.attr("class","inner").attr("x",t.x-y/2-m).attr("y",t.y-t.height/2-m+o.height-1).attr("width",y+f).attr("height",t.height+f-o.height-3),s.attr("transform","translate("+(t.x-o.width/2)+", "+(t.y-t.height/2-t.padding/3+((0,i.k)((0,i.g)().flowchart.htmlLabels)?5:3))+")");const c=r.node().getBBox();return t.height=c.height,t.intersect=function(a){return(0,g.i)(t,a)},e},noteGroup:(n,t)=>{const e=n.insert("g").attr("class","note-cluster").attr("id",t.id),r=e.insert("rect",":first-child"),s=0*t.padding,l=s/2;r.attr("rx",t.rx).attr("ry",t.ry).attr("x",t.x-t.width/2-l).attr("y",t.y-t.height/2-l).attr("width",t.width+s).attr("height",t.height+s).attr("fill","none");const h=r.node().getBBox();return t.width=h.width,t.height=h.height,t.intersect=function(o){return(0,g.i)(t,o)},e},divider:(n,t)=>{const e=n.insert("g").attr("class",t.classes).attr("id",t.id),r=e.insert("rect",":first-child"),s=0*t.padding,l=s/2;r.attr("class","divider").attr("x",t.x-t.width/2-l).attr("y",t.y-t.height/2).attr("width",t.width+s).attr("height",t.height+s);const h=r.node().getBBox();return t.width=h.width,t.height=h.height,t.diff=-t.padding/2,t.intersect=function(o){return(0,g.i)(t,o)},e}};let k={};const U=(n,t)=>{i.l.trace("Inserting cluster");const e=t.shape||"rect";k[t.id]=K[e](n,t)},Z=()=>{k={}},p=(n,t,e,r)=>{i.l.info("Graph in recursive render: XXX",N.c(t),r);const s=t.graph().rankdir;i.l.trace("Dir in recursive render - dir:",s);const l=n.insert("g").attr("class","root");t.nodes()?i.l.info("Recursive render XXX",t.nodes()):i.l.info("No nodes found for",t),t.edges().length>0&&i.l.trace("Recursive edges",t.edge(t.edges()[0]));const h=l.insert("g").attr("class","clusters"),o=l.insert("g").attr("class","edgePaths"),f=l.insert("g").attr("class","edgeLabels"),m=l.insert("g").attr("class","nodes");t.nodes().forEach(function(c){const a=t.node(c);if(r!==void 0){const E=JSON.parse(JSON.stringify(r.clusterData));i.l.info("Setting data for cluster XXX (",c,") ",E,r),t.setNode(r.id,E),t.parent(c)||(i.l.trace("Setting parent",c,r.id),t.setParent(c,r.id,E))}if(i.l.info("(Insert) Node XXX"+c+": "+JSON.stringify(t.node(c))),a&&a.clusterNode){i.l.info("Cluster identified",c,a.width,t.node(c));const E=p(m,a.graph,e,t.node(c)),R=E.elem;(0,g.u)(a,R),a.diff=E.diff||0,i.l.info("Node bounds (abc123)",c,a,a.width,a.x,a.y),(0,g.s)(R,a),i.l.warn("Recursive render complete ",R,a)}else t.children(c).length>0?(i.l.info("Cluster - the non recursive path XXX",c,a.id,a,t),i.l.info(C(a.id,t)),d[a.id]={id:C(a.id,t),node:a}):(i.l.info("Node - the non recursive path",c,a.id,a),(0,g.e)(m,t.node(c),s))}),t.edges().forEach(function(c){const a=t.edge(c.v,c.w,c.name);i.l.info("Edge "+c.v+" -> "+c.w+": "+JSON.stringify(c)),i.l.info("Edge "+c.v+" -> "+c.w+": ",c," ",JSON.stringify(t.edge(c))),i.l.info("Fix",d,"ids:",c.v,c.w,"Translateing: ",d[c.v],d[c.w]),(0,g.f)(f,a)}),t.edges().forEach(function(c){i.l.info("Edge "+c.v+" -> "+c.w+": "+JSON.stringify(c))}),i.l.info("#############################################"),i.l.info("###                Layout                 ###"),i.l.info("#############################################"),i.l.info(t),(0,T.bK)(t),i.l.info("Graph after layout:",N.c(t));let y=0;return j(t).forEach(function(c){const a=t.node(c);i.l.info("Position "+c+": "+JSON.stringify(t.node(c))),i.l.info("Position "+c+": ("+a.x,","+a.y,") width: ",a.width," height: ",a.height),a&&a.clusterNode?(0,g.p)(a):t.children(c).length>0?(U(h,a),d[a.id].node=a):(0,g.p)(a)}),t.edges().forEach(function(c){const a=t.edge(c);i.l.info("Edge "+c.v+" -> "+c.w+": "+JSON.stringify(a),a);const E=(0,g.g)(o,c,a,d,e,t);(0,g.h)(a,E)}),t.nodes().forEach(function(c){const a=t.node(c);i.l.info(c,a.type,a.diff),a.type==="group"&&(y=a.diff)}),{elem:l,diff:y}},G=(n,t,e,r,s)=>{(0,g.a)(n,e,r,s),(0,g.b)(),(0,g.d)(),Z(),M(),i.l.warn("Graph at first:",N.c(t)),W(t),i.l.warn("Graph after:",N.c(t)),p(n,t,r)}}}]);
